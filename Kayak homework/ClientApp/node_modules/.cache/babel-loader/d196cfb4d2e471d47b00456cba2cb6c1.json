{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kompiuteris\\\\source\\\\repos\\\\Kayak homework\\\\Kayak homework\\\\ClientApp\\\\src\\\\components\\\\SearchBar.js\";\nimport React, { Component } from 'react';\nimport Autocomplete from './Autocomplete';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = () => {\n      if (this.search.value.length >= 3) {\n        this.populateAutoComplete();\n      } else {\n        this.setState({\n          loaded: false\n        });\n      }\n    };\n\n    this.handleInputFocusOut = () => {\n      this.setState({\n        loaded: false\n      });\n    };\n\n    this.handleInputFocus = () => {\n      thi.placeholder.style.visibility = \"visible\";\n      this.placeholder.style.color = \"grey\";\n    };\n\n    this.state = {\n      loaded: false,\n      movies: []\n    };\n  } // Show autocomplete on 3 letters and more and populate it\n\n\n  // Change input text to movie name when movie is clicked on in autocomplete\n  handleMovieClick(e, title) {\n    this.search.value = title;\n    this.handleFocusOut();\n  }\n\n  render() {\n    let contents = this.state.loaded ? /*#__PURE__*/React.createElement(Autocomplete, {\n      movies: this.state.movies,\n      onMouseDown: this.handleMovieClick.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }\n    }) : null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      className: \"searchForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"iconAndSearch\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      fill: \"currentColor\",\n      className: \"bi bi-film\",\n      viewBox: \"0 0 16 16\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M0 1a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V1zm4 0v6h8V1H4zm8 8H4v6h8V9zM1 1v2h2V1H1zm2 3H1v2h2V4zM1 7v2h2V7H1zm2 3H1v2h2v-2zm-2 3v2h2v-2H1zM15 1h-2v2h2V1zm-2 3v2h2V4h-2zm2 3h-2v2h2V7zm-2 3v2h2v-2h-2zm2 3h-2v2h2v-2z\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"searchField\",\n      placeholder: \"Enter movie name\",\n      ref: input => this.search = input,\n      onChange: this.handleInputChange,\n      onFocus: this.handleInputFocus,\n      onBlur: this.handleInputFocusOut,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"placeHolder\",\n      ref: p => this.placeholder = p,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 29\n      }\n    }, \"Enter a movie name\"), /*#__PURE__*/React.createElement(\"svg\", {\n      xmlns: \"http://www.w3.org/2000/svg\",\n      fill: \"currentColor\",\n      className: \"bi bi-search\",\n      viewBox: \"0 0 16 16\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"path\", {\n      d: \"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 33\n      }\n    }))), contents)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchResults\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }));\n  } // Connect to movie database and fetch list of movies by input text\n\n\n  async populateAutoComplete() {\n    const response = await fetch('MovieDb?' + new URLSearchParams({\n      query: this.search.value\n    }));\n    const data = await response.json();\n    const movieList = data.results.sort((a, b) => a.vote_average < b.vote_average ? 1 : -1).slice(0, 8);\n    this.setState({\n      loaded: true,\n      movies: movieList\n    });\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["C:/Users/Kompiuteris/source/repos/Kayak homework/Kayak homework/ClientApp/src/components/SearchBar.js"],"names":["React","Component","Autocomplete","SearchBar","constructor","props","handleInputChange","search","value","length","populateAutoComplete","setState","loaded","handleInputFocusOut","handleInputFocus","thi","placeholder","style","visibility","color","state","movies","handleMovieClick","e","title","handleFocusOut","render","contents","bind","input","p","response","fetch","URLSearchParams","query","data","json","movieList","results","sort","a","b","vote_average","slice"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AAE9BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SASnBC,iBATmB,GASC,MAAM;AACtB,UAAI,KAAKC,MAAL,CAAYC,KAAZ,CAAkBC,MAAlB,IAA4B,CAAhC,EAAmC;AAC/B,aAAKC,oBAAL;AACH,OAFD,MAGK;AACD,aAAKC,QAAL,CAAc;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAd;AACH;AACJ,KAhBkB;;AAAA,SAmBnBC,mBAnBmB,GAmBG,MAAM;AACxB,WAAKF,QAAL,CAAc;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAd;AACH,KArBkB;;AAAA,SAwBnBE,gBAxBmB,GAwBA,MAAM;AACrBC,MAAAA,GAAG,CAACC,WAAJ,CAAgBC,KAAhB,CAAsBC,UAAtB,GAAmC,SAAnC;AACA,WAAKF,WAAL,CAAiBC,KAAjB,CAAuBE,KAAvB,GAA+B,MAA/B;AACH,KA3BkB;;AAEf,SAAKC,KAAL,GAAa;AACTR,MAAAA,MAAM,EAAE,KADC;AAETS,MAAAA,MAAM,EAAE;AAFC,KAAb;AAIH,GAR6B,CAU9B;;;AAqBA;AACAC,EAAAA,gBAAgB,CAACC,CAAD,EAAIC,KAAJ,EAAU;AACtB,SAAKjB,MAAL,CAAYC,KAAZ,GAAoBgB,KAApB;AACA,SAAKC,cAAL;AACH;;AAEDC,EAAAA,MAAM,GAAG;AAEL,QAAIC,QAAQ,GAAG,KAAKP,KAAL,CAAWR,MAAX,gBACT,oBAAC,YAAD;AAAc,MAAA,MAAM,EAAE,KAAKQ,KAAL,CAAWC,MAAjC;AAAyC,MAAA,WAAW,EAAE,KAAKC,gBAAL,CAAsBM,IAAtB,CAA2B,IAA3B,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADS,GAET,IAFN;AAIA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAC,4BAAX;AAAwC,MAAA,IAAI,EAAC,cAA7C;AAA4D,MAAA,SAAS,EAAC,YAAtE;AAAmF,MAAA,OAAO,EAAC,WAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,CAAC,EAAC,kPAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,eAII;AAAO,MAAA,SAAS,EAAC,aAAjB;AACI,MAAA,WAAW,EAAC,kBADhB;AAEI,MAAA,GAAG,EAAEC,KAAK,IAAI,KAAKtB,MAAL,GAAcsB,KAFhC;AAGI,MAAA,QAAQ,EAAE,KAAKvB,iBAHnB;AAII,MAAA,OAAO,EAAE,KAAKQ,gBAJlB;AAKI,MAAA,MAAM,EAAE,KAAKD,mBALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,eAWI;AAAG,MAAA,SAAS,EAAC,aAAb;AAA2B,MAAA,GAAG,EAAEiB,CAAC,IAAI,KAAKd,WAAL,GAAmBc,CAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAXJ,eAYI;AAAK,MAAA,KAAK,EAAC,4BAAX;AAAwC,MAAA,IAAI,EAAC,cAA7C;AAA4D,MAAA,SAAS,EAAC,cAAtE;AAAqF,MAAA,OAAO,EAAC,WAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,CAAC,EAAC,2LAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAZJ,CADJ,EAiBKH,QAjBL,CADJ,CADJ,eAsBI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtBJ,CADJ;AA0BH,GArE6B,CAuE9B;;;AACA,QAAMjB,oBAAN,GAA6B;AACzB,UAAMqB,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,IAAIC,eAAJ,CAAoB;AAAEC,MAAAA,KAAK,EAAE,KAAK3B,MAAL,CAAYC;AAArB,KAApB,CAAd,CAA5B;AACA,UAAM2B,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,UAAMC,SAAS,GAAGF,IAAI,CAACG,OAAL,CAAaC,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,YAAF,GAAiBD,CAAC,CAACC,YAAnB,GAAkC,CAAlC,GAAsC,CAAC,CAAnE,EAAsEC,KAAtE,CAA4E,CAA5E,EAA+E,CAA/E,CAAlB;AACA,SAAKhC,QAAL,CAAc;AAAEC,MAAAA,MAAM,EAAE,IAAV;AAAgBS,MAAAA,MAAM,EAAEgB;AAAxB,KAAd;AACH;;AA7E6B;;AAgFlC,eAAelC,SAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport Autocomplete from './Autocomplete';\r\n\r\nclass SearchBar extends Component {  \r\n      \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loaded: false,\r\n            movies: []\r\n        };\r\n    }    \r\n\r\n    // Show autocomplete on 3 letters and more and populate it\r\n    handleInputChange = () => {\r\n        if (this.search.value.length >= 3) {\r\n            this.populateAutoComplete();            \r\n        }\r\n        else {\r\n            this.setState({ loaded: false });\r\n        }\r\n    }\r\n\r\n    // Remove autocomplete window when out of input window\r\n    handleInputFocusOut = () => {\r\n        this.setState({ loaded: false });\r\n    }\r\n\r\n    // Show small placeholder on focus\r\n    handleInputFocus = () => {\r\n        thi.placeholder.style.visibility = \"visible\";\r\n        this.placeholder.style.color = \"grey\";\r\n    }\r\n          \r\n    // Change input text to movie name when movie is clicked on in autocomplete\r\n    handleMovieClick(e, title){\r\n        this.search.value = title;\r\n        this.handleFocusOut();\r\n    }\r\n\r\n    render() {\r\n        \r\n        let contents = this.state.loaded\r\n            ? <Autocomplete movies={this.state.movies} onMouseDown={this.handleMovieClick.bind(this)} />\r\n            : null;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"searchDiv\">\r\n                    <form className=\"searchForm\">\r\n                        <div className=\"iconAndSearch\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" className=\"bi bi-film\" viewBox=\"0 0 16 16\">\r\n                                <path d=\"M0 1a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V1zm4 0v6h8V1H4zm8 8H4v6h8V9zM1 1v2h2V1H1zm2 3H1v2h2V4zM1 7v2h2V7H1zm2 3H1v2h2v-2zm-2 3v2h2v-2H1zM15 1h-2v2h2V1zm-2 3v2h2V4h-2zm2 3h-2v2h2V7zm-2 3v2h2v-2h-2zm2 3h-2v2h2v-2z\" />\r\n                            </svg>\r\n                            <input className=\"searchField\"\r\n                                placeholder=\"Enter movie name\"\r\n                                ref={input => this.search = input}\r\n                                onChange={this.handleInputChange}\r\n                                onFocus={this.handleInputFocus}\r\n                                onBlur={this.handleInputFocusOut}\r\n                            />\r\n                            <p className=\"placeHolder\" ref={p => this.placeholder = p}>Enter a movie name</p>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" className=\"bi bi-search\" viewBox=\"0 0 16 16\">\r\n                                <path d=\"M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z\" />\r\n                            </svg>\r\n                        </div>\r\n                        {contents}                        \r\n                    </form>\r\n                </div>\r\n                <div className=\"searchResults\"></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Connect to movie database and fetch list of movies by input text\r\n    async populateAutoComplete() {\r\n        const response = await fetch('MovieDb?' + new URLSearchParams({ query: this.search.value }));\r\n        const data = await response.json();\r\n        const movieList = data.results.sort((a, b) => a.vote_average < b.vote_average ? 1 : -1).slice(0, 8);\r\n        this.setState({ loaded: true, movies: movieList });\r\n    }\r\n}\r\n\r\nexport default SearchBar;\r\n"]},"metadata":{},"sourceType":"module"}