{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kompiuteris\\\\source\\\\repos\\\\Kayak homework\\\\Kayak homework\\\\ClientApp\\\\src\\\\components\\\\SearchBar.js\";\nimport React, { Component } from 'react';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = () => {\n      if (this.search.value.length >= 3) {\n        this.populateAutoComplete();\n      }\n    };\n\n    loaded = false;\n    movies = [];\n    this.state = {\n      loaded: false,\n      movies: []\n    };\n  }\n\n  render() {\n    let contents = this.State.loaded ? this.State.movies(movie => /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 44\n      }\n    }, movie.Original_title)) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 16\n      }\n    }, \" No movies \");\n    return /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      placeholder: \"Search for...\",\n      ref: input => this.search = input,\n      onChange: this.handleInputChange,\n      autoComplete: \"on\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    }), contents);\n  }\n\n  async populateAutoComplete() {\n    const response = await fetch('MovieDb?' + new URLSearchParams({\n      query: this.search.value\n    }));\n    const data = await response.json();\n    loaded = true;\n    movies = data.Original_title;\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["C:/Users/Kompiuteris/source/repos/Kayak homework/Kayak homework/ClientApp/src/components/SearchBar.js"],"names":["React","Component","SearchBar","constructor","props","handleInputChange","search","value","length","populateAutoComplete","loaded","movies","state","render","contents","State","movie","Original_title","input","response","fetch","URLSearchParams","query","data","json"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAE9BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUnBC,iBAVmB,GAUC,MAAM;AACtB,UAAI,KAAKC,MAAL,CAAYC,KAAZ,CAAkBC,MAAlB,IAA0B,CAA9B,EAAiC;AAC7B,aAAKC,oBAAL;AACH;AACJ,KAdkB;;AAEfC,IAAAA,MAAM,GAAG,KAAT;AACAC,IAAAA,MAAM,GAAG,EAAT;AACA,SAAKC,KAAL,GAAa;AACTF,MAAAA,MAAM,EAAE,KADC;AAETC,MAAAA,MAAM,EAAE;AAFC,KAAb;AAIH;;AAQDE,EAAAA,MAAM,GAAG;AACL,QAAIC,QAAQ,GAAG,KAAKC,KAAL,CAAWL,MAAX,GACT,KAAKK,KAAL,CAAWJ,MAAX,CAAkBK,KAAK,iBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,KAAK,CAACC,cAAV,CAA7B,CADS,gBAER;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFP;AAIA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AACI,MAAA,WAAW,EAAC,eADhB;AAEI,MAAA,GAAG,EAAEC,KAAK,IAAI,KAAKZ,MAAL,GAAcY,KAFhC;AAGI,MAAA,QAAQ,EAAE,KAAKb,iBAHnB;AAII,MAAA,YAAY,EAAC,IAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAOKS,QAPL,CADJ;AAWH;;AAED,QAAML,oBAAN,GAA6B;AACzB,UAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,IAAIC,eAAJ,CAAoB;AAAEC,MAAAA,KAAK,EAAE,KAAKhB,MAAL,CAAYC;AAArB,KAApB,CAAd,CAA5B;AACA,UAAMgB,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAd,IAAAA,MAAM,GAAG,IAAT;AACAC,IAAAA,MAAM,GAAGY,IAAI,CAACN,cAAd;AACH;;AAzC6B;;AA8ClC,eAAef,SAAf","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass SearchBar extends Component {  \r\n      \r\n    constructor(props) {\r\n        super(props);\r\n        loaded = false;\r\n        movies = [];\r\n        this.state = {\r\n            loaded: false,\r\n            movies: []\r\n        };\r\n    }\r\n\r\n    handleInputChange = () => {\r\n        if (this.search.value.length>=3) {\r\n            this.populateAutoComplete();\r\n        }                \r\n    }\r\n\r\n    render() {\r\n        let contents = this.State.loaded\r\n            ? this.State.movies(movie => ( <p>{movie.Original_title}</p> ) )\r\n            :  < p > No movies </p>\r\n\r\n        return (\r\n            <form>\r\n                <input\r\n                    placeholder=\"Search for...\"\r\n                    ref={input => this.search = input}\r\n                    onChange={this.handleInputChange}\r\n                    autoComplete=\"on\"\r\n                />\r\n                {contents}             \r\n            </form>\r\n        )\r\n    }\r\n\r\n    async populateAutoComplete() {\r\n        const response = await fetch('MovieDb?' + new URLSearchParams({ query: this.search.value }));\r\n        const data = await response.json();  \r\n        loaded = true;\r\n        movies = data.Original_title;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SearchBar;\r\n"]},"metadata":{},"sourceType":"module"}