{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kompiuteris\\\\source\\\\repos\\\\Kayak homework\\\\Kayak homework\\\\ClientApp\\\\src\\\\components\\\\SearchBar.js\";\nimport React, { Component } from 'react';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = () => {\n      if (this.search.value.length >= 3) {\n        this.populateAutoComplete();\n      }\n    };\n\n    this.State = {\n      movies: [],\n      loaded: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      placeholder: \"Search for...\",\n      ref: input => this.search = input,\n      onChange: this.handleInputChange,\n      autoComplete: \"on\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }\n    }), loaded ? this.State.movies(movie => /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 29\n      }\n    }, movie.Original_title)) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 25\n      }\n    }, \" No movies \"));\n  }\n\n  async populateAutoComplete() {\n    const response = await fetch('MovieDb?' + new URLSearchParams({\n      query: this.search.value\n    }));\n    const data = await response.json();\n    this.setState({\n      movies: data.results,\n      loaded: true\n    });\n  }\n\n}\n\nexport default SearchBar;","map":{"version":3,"sources":["C:/Users/Kompiuteris/source/repos/Kayak homework/Kayak homework/ClientApp/src/components/SearchBar.js"],"names":["React","Component","SearchBar","constructor","props","handleInputChange","search","value","length","populateAutoComplete","State","movies","loaded","render","input","movie","Original_title","response","fetch","URLSearchParams","query","data","json","setState","results"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAE9BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAKnBC,iBALmB,GAKC,MAAM;AACtB,UAAI,KAAKC,MAAL,CAAYC,KAAZ,CAAkBC,MAAlB,IAA0B,CAA9B,EAAiC;AAC7B,aAAKC,oBAAL;AACH;AACJ,KATkB;;AAEf,SAAKC,KAAL,GAAa;AAAEC,MAAAA,MAAM,EAAE,EAAV;AAAcC,MAAAA,MAAM,EAAE;AAAtB,KAAb;AACH;;AAQDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AACI,MAAA,WAAW,EAAC,eADhB;AAEI,MAAA,GAAG,EAAEC,KAAK,IAAI,KAAKR,MAAL,GAAcQ,KAFhC;AAGI,MAAA,QAAQ,EAAE,KAAKT,iBAHnB;AAII,MAAA,YAAY,EAAC,IAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAOKO,MAAM,GACC,KAAKF,KAAL,CAAWC,MAAX,CAAkBI,KAAK,iBACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,KAAK,CAACC,cAAV,CADJ,CADD,gBAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAZZ,CADJ;AAiBH;;AAED,QAAMP,oBAAN,GAA6B;AACzB,UAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,IAAIC,eAAJ,CAAoB;AAAEC,MAAAA,KAAK,EAAE,KAAKd,MAAL,CAAYC;AAArB,KAApB,CAAd,CAA5B;AACA,UAAMc,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,SAAKC,QAAL,CAAc;AACVZ,MAAAA,MAAM,EAAEU,IAAI,CAACG,OADH;AAEVZ,MAAAA,MAAM,EAAE;AAFE,KAAd;AAIH;;AAxC6B;;AA6ClC,eAAeV,SAAf","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass SearchBar extends Component {  \r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.State = { movies: [], loaded: false };\r\n    }    \r\n\r\n    handleInputChange = () => {\r\n        if (this.search.value.length>=3) {\r\n            this.populateAutoComplete();\r\n        }                \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <input\r\n                    placeholder=\"Search for...\"\r\n                    ref={input => this.search = input}\r\n                    onChange={this.handleInputChange}\r\n                    autoComplete=\"on\"\r\n                />     \r\n                {loaded ? (                    \r\n                        this.State.movies(movie => (\r\n                            <p>{movie.Original_title}</p>\r\n                        ))                    \r\n                ) : (\r\n                        <p> No movies </p>\r\n                    )}                \r\n            </form>\r\n        )\r\n    }\r\n\r\n    async populateAutoComplete() {\r\n        const response = await fetch('MovieDb?' + new URLSearchParams({ query: this.search.value }));\r\n        const data = await response.json();    \r\n        this.setState({\r\n            movies: data.results,\r\n            loaded: true\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default SearchBar;\r\n"]},"metadata":{},"sourceType":"module"}